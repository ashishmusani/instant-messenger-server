{"version":3,"sources":["../node_modules/peerjs/dist sync","components/ChatScreen/SingleMessage/index.js","components/ChatScreen/OnlineUsersList/UserView/index.js","components/ChatScreen/OnlineUsersList/index.js","contexts/LoginContext.js","components/ChatScreen/index.js","components/LoginScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","SingleMessage","props","envelope","sender","message","type","Col","xs","className","src","alt","UserView","user","setSendingTo","sendingTo","unreads","closeOnlineUsersModal","onClick","OnlineUsersList","onlineUsers","unreadMessagesCount","map","LoginContext","React","createContext","MessageNotificationSound","Audio","IncomingCallNotificationSound","CallDropNotificationSound","OutgoingCallRingSound","loop","peer_call","local_stream","myPeer","Peer","undefined","secure","initialCallState","isInCall","callType","callStatus","isInCallWith","peerIdToCall","callStateReducer","state","action","calling_to","call_from","callee_peerId","ChatScreen","username","useContext","socket","handleLogout","messagesEndRef","useRef","messageTextboxRef","sendFileDialogRef","mediaDivRef","useState","setOnlineUsers","conversation","setConversation","setUnreadMessages","newMessage","setNewMessage","showOnlineUsersModal","setShowOnlineUsersModal","useReducer","callState","dispatch","updateConversation","channel","to","isBroadcast","length","updatedSingleConversation","conversationCopy","updateUnreadOnMessageReceive","unreadMessages_copy","endCall","fromSelf","resetNotificationSounds","play","console","log","removeAllListeners","emit","close","clearEndedCallDetails","current","srcObject","getTracks","forEach","track","stop","pause","currentTime","useEffect","open","hist","JSON","parse","sessionStorage","getItem","disconnect","scrollIntoView","block","updateUnreadOnFocusChange","setItem","stringify","on","userList","filter","uname","reason","alert","connect","peerId","from_user","Container","fluid","Row","sm","Modal","show","onHide","centered","Header","closeButton","Title","ref","Form","onSubmit","preventDefault","sendMessage","Group","as","controlId","InputGroup","Control","size","placeholder","value","onChange","target","autocomplete","autoFocus","Append","Button","variant","call","navigator","mediaDevices","getUserMedia","audio","video","then","stream","answer","userVideoStream","click","File","accept","event","file","files","reader","FileReader","readAsDataURL","onload","dataURL","result","sendFile","autoplay","LoginScreen","Context","formIsValidated","setFormIsValidated","setUsername","password","setPassword","noValidate","validated","currentTarget","checkValidity","stopPropagation","userCredentials","axios","post","process","REACT_APP_SERVER_URL","res","status","catch","err","response","data","md","Label","required","Feedback","io","loginReducer","loggedIn","App","loginDetails","connected","LoginContextValue","Provider","Navbar","expand","sticky","Brand","Nav","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.a3539069.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 118;","import React from 'react';\n\nimport './SingleMessage.css';\n\nimport Col from 'react-bootstrap/Col'\n\nexport default function SingleMessage(props){\n\n  const envelope = props.envelope;\n  const sender = envelope.sender;\n  const message = envelope.message;\n  const type = envelope.type;\n\n  return(\n    <div>\n      {sender === \"Me\"? (<Col xs=\"2\"></Col>) : null}\n      <div className={sender === 'Me'? 'single-message__self' : 'single-message__other'}>\n        <small><strong>{sender}</strong></small>\n        <div className=\"single-message__content\">\n\n        {type === \"image\"? (<img className=\"single-message__image\" src={message} alt=\"Problem loading resource\"/>) : message}\n\n        </div>\n\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport './UserView.css'\n\nexport default function UserView(props){\n\n  const user =  props.user;\n  const setSendingTo = props.setSendingTo;\n  const sendingTo = props.sendingTo;\n  const unreads = props.unreads;\n  const closeOnlineUsersModal =  props.closeOnlineUsersModal;\n\n  const changeConversationWindow = () =>{\n    setSendingTo(user);\n    closeOnlineUsersModal();\n  }\n\n  //console.log(user + \": \", unreads)\n\n  return (\n    <div className={sendingTo === user? \"online-user-selected\" : \"online-user\"} onClick={changeConversationWindow}>\n      <div className=\"online-user__icon\">\n      </div>\n      <div className=\"online-user__details\">\n      <strong>{user} </strong>\n      </div>\n      {unreads>0? (<div className=\"online-user__details__unreads\">{unreads}</div>) : null}\n    </div>\n  )\n}\n","import React from 'react';\n\nimport UserView from './UserView';\n\nexport default function OnlineUsersList(props){\n  const sendingTo = props.sendingTo;\n  const setSendingTo = props.setSendingTo;\n  var onlineUsers =  props.onlineUsers;\n  onlineUsers = [\"conference\", ...onlineUsers];\n  var unreadMessagesCount =  props.unreadMessagesCount;\n  const closeOnlineUsersModal = props.closeOnlineUsersModal;\n\n  return (\n    <div className=\"online-users-list\">\n      {onlineUsers.map(user => (<UserView user={user} unreads={unreadMessagesCount[user]} sendingTo={sendingTo} setSendingTo={setSendingTo} closeOnlineUsersModal={closeOnlineUsersModal}/>))}\n    </div>\n  )\n}\n","import React from 'react';\n\nconst LoginContext = React.createContext(null);\n\nexport default LoginContext;\n","import React, {useState, useEffect,useContext, useRef, useReducer} from 'react';\nimport Peer from 'peerjs';\n\nimport './ChatScreen.css';\nimport SingleMessage from './SingleMessage';\nimport OnlineUsersList from './OnlineUsersList';\nimport LoginContext from '../../contexts/LoginContext';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Modal from 'react-bootstrap/Modal';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Button from 'react-bootstrap/Button';\nimport { Camera, Telephone, TelephoneInbound,TelephoneX } from 'react-bootstrap-icons';\n\nconst MessageNotificationSound = new Audio(process.env.PUBLIC_URL+ \"/msg_notification.mp3\");\nconst IncomingCallNotificationSound = new Audio(process.env.PUBLIC_URL+ \"/call_notification.mp3\");\nconst CallDropNotificationSound = new Audio(process.env.PUBLIC_URL+ \"/call_drop_notification.mp3\");\nconst OutgoingCallRingSound = new Audio(process.env.PUBLIC_URL+ \"/ringing_tone.mp3\");\n\nIncomingCallNotificationSound.loop = true;\nOutgoingCallRingSound.loop = true;\n\n\nconst myPeer = new Peer(undefined,{\n  secure: true\n})\nvar peer_call;\nvar local_stream;\nvar callRingingInterval;\n\n\nconst initialCallState = {\n  isInCall: false,\n  callType: null,\n  callStatus: null,\n  isInCallWith: null,\n  peerIdToCall: null\n}\n\nfunction callStateReducer(state, action){\n  switch (action.type) {\n    case 'outgoing-call':\n      return {\n        isInCall: true,\n        callType: 'outgoing',\n        callStatus: 'ringing',\n        isInCallWith: action.calling_to,\n      };\n    case 'outgoing-call__answered':\n      return {...state, callStatus:'connected'};\n    case 'outgoing-call__declined':\n      return {};\n    case 'incoming-call':\n      return {\n        isInCall: true,\n        callType: 'incoming',\n        callStatus: 'ringing',\n        isInCallWith: action.call_from,\n        peerIdToCall: action.callee_peerId\n      };\n    case 'incoming-call__answered':\n      return {...state, callStatus:'connected'};\n    case 'incoming-call__declined':\n      return {};\n    case 'call__ended':\n      return {...initialCallState};\n      default:\n      throw new Error();\n  }\n}\n\nexport default function ChatScreen(props){\n\n  const Context = useContext(LoginContext);\n  const username = Context.username;\n\n  const socket = props.socket;\n  const handleLogout = props.handleLogout;\n\n  const messagesEndRef = useRef(null);\n  const messageTextboxRef = useRef(null);\n  const sendFileDialogRef = useRef(null);\n  const mediaDivRef = useRef(null);\n\n\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [conversation, setConversation] = useState({});\n  const [unreadMessagesCount, setUnreadMessages] = useState({});\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [sendingTo, setSendingTo] = useState(\"conference\");\n  const [showOnlineUsersModal, setShowOnlineUsersModal] = useState(false);\n  const closeOnlineUsersModal = () => setShowOnlineUsersModal(false);\n  const openOnlineUsersModal = () => setShowOnlineUsersModal(true);\n\n  const [callState, dispatch] = useReducer(callStateReducer, initialCallState)\n\n  useEffect(()=>{\n    socket.open();\n    socket.emit('login', username);\n    const hist = JSON.parse(sessionStorage.getItem('conversation'));\n    if(hist){\n      setConversation(hist);\n    }\n    return () => {\n      socket.disconnect();\n    }\n  }, [username, socket])\n\n  useEffect(()=>{\n    messagesEndRef.current.scrollIntoView({block: \"end\"});\n    updateUnreadOnFocusChange();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sendingTo,conversation]);\n\n  useEffect(()=>{\n    sessionStorage.setItem('conversation', JSON.stringify(conversation));\n  }, [conversation]);\n\n  useEffect(()=>{\n    socket.removeAllListeners('broadcast-to-clients');\n    socket.removeAllListeners('online-users-list');\n    socket.removeAllListeners('personal_message');\n    socket.removeAllListeners('disconnect');\n\n    socket.on('broadcast-to-clients', (envelope)=>{\n      MessageNotificationSound.play();\n      updateUnreadOnMessageReceive(envelope);\n      updateConversation('incoming', envelope);\n    })\n    socket.on('online-users-list', (userList)=>{\n      setOnlineUsers(userList.filter(uname => (uname !== username)));\n    })\n    socket.on('personal_message', (envelope)=>{\n      MessageNotificationSound.play();\n      updateUnreadOnMessageReceive(envelope);\n      updateConversation('incoming', envelope);\n    })\n    socket.on('disconnect', (reason) =>{\n      if(!(reason === 'io client disconnect')){\n        handleLogout();\n        alert(\"Disconnected from server\");\n        socket.connect();\n      }\n    })\n\n    socket.removeAllListeners('incoming_call_request');\n    socket.on('incoming_call_request', (peerId, from_user) => {\n      console.log(\"initiating call to peerId: \"+peerId);\n      IncomingCallNotificationSound.play();\n      dispatch({type: 'incoming-call', call_from: from_user, callee_peerId: peerId});\n    })\n\n    socket.removeAllListeners('end_ongoing_call');\n    socket.on('end_ongoing_call', () => {\n      console.log(\"ending call due to socket event receipt\");\n      endCall();\n    })\n\n  });\n\n  function sendMessage(e){\n    e.preventDefault();\n    if(newMessage === \"\"){\n      alert(\"Cant send blank\")\n    }\n    else{\n      const envelope = {\n        sender: username,\n        to: sendingTo,\n        type:\"text\" ,\n        message: newMessage,\n        isBroadcast: sendingTo === 'conference'\n      }\n      if(sendingTo === \"conference\"){\n        socket.emit('broadcast-to-server', envelope);\n      } else {\n        socket.emit('personal_message', envelope)\n      }\n      envelope.sender=\"Me\";\n      updateConversation('outgoing', envelope);\n      setNewMessage(\"\");\n    }\n  }\n\n  function sendFile(event){\n    var file = event.target.files[0];\n    var reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      var dataURL = reader.result;\n      const envelope = {\n        sender: username,\n        to: sendingTo,\n        type:\"image\" ,\n        message: dataURL,\n        isBroadcast: sendingTo === 'conference'\n      }\n      if(sendingTo === \"conference\"){\n        socket.emit('broadcast-to-server', envelope);\n      } else {\n        socket.emit('personal_message', envelope)\n      }\n      envelope.sender=\"Me\";\n      updateConversation('outgoing', envelope);\n    }\n  }\n\n  function updateConversation(type, envelope){\n    var channel;\n    if(type === 'outgoing'){\n      channel = envelope.to;\n    } else {\n      if (envelope.isBroadcast){\n        channel = \"conference\";\n      } else{\n        channel = envelope.sender;\n      }\n    }\n    if( (channel in conversation) && (conversation[channel].length>0) ){\n      const updatedSingleConversation = [...conversation[channel], envelope];\n      const conversationCopy = {...conversation};\n      conversationCopy[channel] = updatedSingleConversation;\n      setConversation(conversationCopy);\n    } else {\n      const updatedSingleConversation = [envelope];\n      const conversationCopy = {...conversation};\n      conversationCopy[channel] = updatedSingleConversation;\n      setConversation(conversationCopy);\n    }\n  }\n\n  function updateUnreadOnMessageReceive(envelope){\n    var channel;\n    if (envelope.isBroadcast){\n      channel = \"conference\";\n    } else{\n      channel = envelope.sender;\n    }\n    if(channel !== sendingTo){\n      if(channel in unreadMessagesCount){\n        const unreadMessages_copy = unreadMessagesCount;\n        unreadMessages_copy[channel] = unreadMessages_copy[channel]+1;\n        setUnreadMessages(unreadMessages_copy);\n      } else{\n        const unreadMessages_copy = unreadMessagesCount;\n        unreadMessages_copy[channel] = 1;\n        setUnreadMessages(unreadMessages_copy);\n      }\n    }\n  }\n\n  function updateUnreadOnFocusChange(){\n    const unreadMessages_copy = unreadMessagesCount;\n    unreadMessages_copy[sendingTo] = 0;\n    setUnreadMessages(unreadMessages_copy);\n  }\n\n  function initiate_audio_call(){\n    if(sendingTo === 'conference'){\n      alert('Oops! Conference calls are not yet supported!')\n    }\n    else{\n      console.log('Placing audio call request');\n      OutgoingCallRingSound.play();\n      socket.emit('make_call_request', myPeer.id, sendingTo, username);\n      dispatch({type: 'outgoing-call', calling_to: sendingTo});\n\n      myPeer.on('call', call=>{\n        console.log(\"call received from another user\");\n        resetNotificationSounds();\n        dispatch({type: 'outgoing-call__answered'});\n        navigator.mediaDevices.getUserMedia({\n          audio:true,\n          video:false\n        }).then(stream =>{\n          local_stream = stream;\n          peer_call=call;\n          call.answer(stream);\n          call.on('stream', userVideoStream =>{\n            mediaDivRef.current.srcObject = userVideoStream;\n            console.log(\"Stream received from calling to user\");\n          })\n          peer_call.on('close', () =>{\n            console.log(\"on close() called for \" + callState.callType);\n            clearEndedCallDetails();\n          })\n        });\n      });\n\n    }\n  }\n\n  function answerIncomingCall(){\n    resetNotificationSounds();\n    dispatch({type: 'incoming-call__answered'});\n    navigator.mediaDevices.getUserMedia({\n      audio:true,\n      video:false\n    }).then(stream => {\n      local_stream = stream;\n      peer_call = myPeer.call(callState.peerIdToCall,stream);\n      peer_call.on('stream', userVideoStream =>{\n        mediaDivRef.current.srcObject = userVideoStream;\n        console.log(\"stream received from call initiator user\")\n      })\n      peer_call.on('close', ()=>{\n        console.log(\"on close() called for \" + callState.callType);\n        clearEndedCallDetails()\n      })\n    })\n  }\n\n  function endCall(fromSelf){\n    resetNotificationSounds();\n    CallDropNotificationSound.play();\n    console.log(\"ending \"+ callState.callType  + \" call\");\n    myPeer.removeAllListeners();\n    if(fromSelf){\n      socket.emit('end_ongoing_call', callState.isInCallWith);\n    }\n    switch (callState.callStatus){\n      case 'connected':\n        peer_call.close();\n        break;\n      case 'ringing':\n        clearEndedCallDetails();\n        break;\n    }\n  }\n\n  function clearEndedCallDetails(){\n    mediaDivRef.current.srcObject = null;\n    if(local_stream){\n      local_stream.getTracks().forEach(track => track.stop())\n    }\n    dispatch({type: 'call__ended'})\n  }\n\n  function resetNotificationSounds(){\n    IncomingCallNotificationSound.pause();\n    IncomingCallNotificationSound.currentTime = 0;\n    OutgoingCallRingSound.pause();\n    OutgoingCallRingSound.currentTime = 0;\n  }\n\n  return (\n    <Container fluid id=\"chat-screen\">\n        <Row id=\"chat-screen__msg-area\">\n          <Col xs=\"3\" sm=\"3\" id=\"chat-screen__msg-area__online-users\">\n            <OnlineUsersList onlineUsers={onlineUsers} unreadMessagesCount={unreadMessagesCount}\n                             sendingTo={sendingTo} setSendingTo={setSendingTo} closeOnlineUsersModal={closeOnlineUsersModal}/>\n          </Col>\n          <Col xs=\"12\" sm=\"9\" id=\"chat-screen__msg-area__main\">\n              <div id=\"chat-screen__msg-area__header\">\n                <span id=\"chat-screen__msg-area__header__normal\">{sendingTo}</span>\n                <span id=\"chat-screen__msg-area__header__xs\" onClick={openOnlineUsersModal}>{sendingTo}</span>\n                <Modal show={showOnlineUsersModal} onHide={closeOnlineUsersModal} centered>\n                        <Modal.Header closeButton>\n                          <Modal.Title>Online Users</Modal.Title>\n                        </Modal.Header>\n                        <OnlineUsersList onlineUsers={onlineUsers} unreadMessagesCount={unreadMessagesCount}\n                                         sendingTo={sendingTo} setSendingTo={setSendingTo}\n                                         closeOnlineUsersModal={closeOnlineUsersModal}/>\n                </Modal>\n              </div>\n              <div className=\"chat-screen__msg-area__conversation\">\n                  {(sendingTo in conversation && conversation[sendingTo].length>0)?\n                      conversation[sendingTo].map((envelope)=> (<SingleMessage envelope={envelope}/>)) :\n                      null\n                  }\n                  <Row className = \"dummy-message\" ref={messagesEndRef}>\n                  </Row>\n              </div>\n              <div className=\"chat-screen__actions\">\n                <Form onSubmit={(e)=> sendMessage(e)}>\n                    <Form.Group as={Col} sm=\"12\" controlId=\"send_message\">\n                      <InputGroup>\n                          <Form.Control id=\"chat-screen__actions__message\" ref={messageTextboxRef} size=\"md\" type=\"text\"\n                            placeholder=\"Type a message\" value={newMessage}\n                            onChange={(e)=> setNewMessage(e.target.value)} autocomplete=\"off\" autoFocus/>\n                        <InputGroup.Append>\n                          <Button variant=\"secondary\" onClick={()=> initiate_audio_call()}>\n                            <Telephone />\n                          </Button>\n                          <Button variant=\"secondary\" onClick={()=> {sendFileDialogRef.current.click()}}>\n                            <Camera />\n                          </Button>\n                          <Form.File id=\"chat-screen__actions__file\" accept=\"image/*\"\n                          ref={sendFileDialogRef} onChange={(e)=> sendFile(e)}/>\n                        </InputGroup.Append>\n                      </InputGroup>\n                    </Form.Group>\n                </Form>\n              </div>\n          </Col>\n        </Row>\n\n\n\n        <video className=\"chat-screen__mediastream\" autoplay=\"true\" id=\"mediaDiv\" ref={mediaDivRef} />\n        <Modal id=\"call_modal\" show={callState.isInCall} centered>\n                <div className =\"call_profile\">\n                  <div className=\"call_profile_photo\"></div>\n                  <div className=\"call_profile_name\">{callState.isInCallWith}</div>\n                </div>\n                <div className =\"call_actions\">\n                {(callState.callType === 'incoming' && callState.callStatus === 'ringing') ?\n                ( <>\n                    <TelephoneInbound id=\"call_answer_button\" onClick={()=> answerIncomingCall()}/>\n                    <TelephoneX id=\"call_end_button\" onClick={()=> endCall(true)}/>\n                  </>\n                ) :\n                (<TelephoneX id=\"call_end_button\" onClick={()=> endCall(true)}/>)}\n                </div>\n        </Modal>\n\n\n\n\n    </Container>\n  );\n}\n","import React, {useContext, useState} from 'react';\nimport axios from 'axios';\nimport './LoginScreen.css';\n\nimport LoginContext from '../../contexts/LoginContext';\n\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nexport default function LoginScreen(){\n\n  const Context = useContext(LoginContext);\n\n  const [formIsValidated, setFormIsValidated] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    if (form.checkValidity() === false) {\n      e.stopPropagation();\n      setFormIsValidated(true)\n    }\n    else{\n      const userCredentials = {\n        \"username\": username,\n        \"password\": password\n      }\n      axios.post(`${process.env.REACT_APP_SERVER_URL}/login`, userCredentials)\n      .then(res =>{\n        if(res.status === 201){\n          sessionStorage.setItem('username', JSON.stringify(username));\n          sessionStorage.setItem('loggedIn', JSON.stringify(true));\n          Context.dispatch({type: 'login', username})\n        }\n      })\n      .catch(err =>{\n        if(err){\n          if(err.response && err.response.status === 401){\n            alert(err.response.data)\n          }\n          else{\n            alert(err);\n          }\n        }\n      })\n    }\n  }\n\n  return(\n      <Form className=\"login-form\" noValidate validated={formIsValidated} onSubmit={handleLogin}>\n        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"validate_login_username\">\n          <Col sm=\"2\" md=\"1\">\n            <Form.Label>Username</Form.Label>\n          </Col>\n          <Col sm=\"4\" md=\"4\">\n            <Form.Control type=\"text\" size=\"sm\" value={username}\n                          onChange={(e) => setUsername(e.target.value)}\n                          required autocomplete=\"off\" autoFocus>\n            </Form.Control>\n            <Form.Control.Feedback type=\"invalid\">Please provide username</Form.Control.Feedback>\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row} className=\"justify-content-center\" controlId=\"validate_login_password\">\n          <Col sm=\"2\" md=\"1\">\n            <Form.Label>Password</Form.Label>\n          </Col>\n          <Col sm=\"4\" md=\"4\">\n            <Form.Control type=\"password\" size=\"sm\" value={password}\n            onChange={(e) => setPassword(e.target.value)} required>\n            </Form.Control>\n            <Form.Control.Feedback type=\"invalid\">Please provide password</Form.Control.Feedback>\n          </Col>\n        </Form.Group>\n        <Form.Group as={Row} className=\"justify-content-center\">\n          <Col sm=\"4\" md=\"4\">\n          </Col>\n          <Col sm=\"2\" md=\"1\">\n          <Button className=\"btn-block\" type=\"submit\">Login</Button>\n          </Col>\n        </Form.Group>\n      </Form>\n  )\n}\n","import React, {useReducer} from 'react';\nimport io from 'socket.io-client';\n\nimport ChatScreen from './components/ChatScreen';\nimport LoginScreen from './components/LoginScreen';\nimport './App.css';\n\nimport LoginContext from './contexts/LoginContext';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Button from 'react-bootstrap/Button';\n\nconst socket = io(`${process.env.REACT_APP_SERVER_URL}`);\n\nfunction loginReducer(state, action){\n  switch (action.type) {\n    case 'login':\n      return {loggedIn: true, username: action.username};\n    case 'logout':\n      return {loggedIn: false, username: null};\n    default:\n      throw new Error();\n  }\n}\n\nfunction App() {\n\n  const [loginDetails, dispatch] = useReducer(loginReducer,{\n    username: (JSON.parse(sessionStorage.getItem('username')) || \"\"),\n    loggedIn: (JSON.parse(sessionStorage.getItem('loggedIn')) || false)\n  })\n\n  const handleLogout = () =>{\n    sessionStorage.setItem('username', JSON.stringify(null));\n    sessionStorage.setItem('loggedIn', JSON.stringify(false));\n    if(socket.connected){\n      socket.close();\n    }\n    dispatch({type: 'logout'});\n\n  }\n\n  const LoginContextValue={\n    ...loginDetails,\n    dispatch\n  }\n\n  return (\n    <LoginContext.Provider value={LoginContextValue}>\n    <Navbar className=\"header\" expand=\"lg\" sticky=\"top\">\n      <Navbar.Brand>Instant Messenger</Navbar.Brand>\n        {loginDetails.loggedIn === true? (\n          <>\n          <Nav className=\"ml-auto\">\n            <Button variant=\"outline-secondary\" size=\"sm\" onClick={handleLogout}>Logout</Button>\n          </Nav>\n          </>\n        ) : null}\n    </Navbar>\n        {loginDetails.loggedIn === true? (<ChatScreen handleLogout={handleLogout} socket={socket}/>) : (<LoginScreen />)}\n    </LoginContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}